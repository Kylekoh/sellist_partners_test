{"ast":null,"code":"import axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport qs from \"qs\";\nimport { useSelector } from \"react-redux\";\nimport { headers, buyCredit, deleteMultiCart } from \"../../Config/urls\";\nconst EMAIL = localStorage.getItem(\"email\"); // CartType: 1, 정상적으로 구매가 진행되면 포인트 차감 진행\n\nconst postCartCredits = async cartDataItems => {\n  var _cartDataItems$, _cartDataItems$$, _cartDataItems$2, _cartDataItems$2$;\n\n  const getCash = (_cartDataItems$ = cartDataItems[0]) === null || _cartDataItems$ === void 0 ? void 0 : (_cartDataItems$$ = _cartDataItems$[0]) === null || _cartDataItems$$ === void 0 ? void 0 : _cartDataItems$$.map(list => list.credit_cash);\n  const getCredit = (_cartDataItems$2 = cartDataItems[0]) === null || _cartDataItems$2 === void 0 ? void 0 : (_cartDataItems$2$ = _cartDataItems$2[0]) === null || _cartDataItems$2$ === void 0 ? void 0 : _cartDataItems$2$.map(list => list.credit_amount);\n  const data = qs.stringify({\n    email: EMAIL,\n    price: getCash,\n    credit: getCredit\n  });\n  await axios.post(buyCredit, data, {\n    headers\n  });\n}; // 정상적으로 구매가 진행되면 장바구니에 담긴 Item 삭제\n\n\nconst deleteMultiCredit = async cartDataItems => {\n  var _cartDataItems$3, _cartDataItems$3$;\n\n  const userCartId = (_cartDataItems$3 = cartDataItems[0]) === null || _cartDataItems$3 === void 0 ? void 0 : (_cartDataItems$3$ = _cartDataItems$3[0]) === null || _cartDataItems$3$ === void 0 ? void 0 : _cartDataItems$3$.map(list => list.cart_id);\n  const convertUserId = String(userCartId);\n  const deleteData = {\n    email: EMAIL,\n    cart_ids: convertUserId\n  };\n  await axios.delete(deleteMultiCart, {\n    headers,\n    params: deleteData\n  });\n}; // CartType:2, 정상적으로 구매가 진행되면 포인트 차감 진행\n\n\nconst postDirectBuyCredits = async buyItem => {\n  var _buyItem$, _buyItem$2, _buyItem$3;\n\n  const getCash = (_buyItem$ = buyItem[0]) === null || _buyItem$ === void 0 ? void 0 : _buyItem$[0][\"credit_cash\"];\n  const getCredit = (_buyItem$2 = buyItem[0]) === null || _buyItem$2 === void 0 ? void 0 : _buyItem$2[0][\"credit_amount\"];\n  const cartId = (_buyItem$3 = buyItem[0]) === null || _buyItem$3 === void 0 ? void 0 : _buyItem$3[0][\"cart_id\"];\n  const data = qs.stringify({\n    email: EMAIL,\n    price: getCash,\n    credit: getCredit,\n    from_cart: 1,\n    cart_id: cartId\n  });\n  await axios.post(buyCredit, data, {\n    headers\n  });\n};\n/* 전달 받은 cartType 숫자에 따라 결재 process가 구분된다.\n1: 장바구니에 담긴 상품을 구매할 경우 -> 개별 item의 합계를 구하고 결재를 진행한다.\n2: 바로 구매하기 버튼으로 상품을 구매할 경우 -> 최근에 담긴 store item을 확인하여 낱개 item의 결재를 진행한다.\n*/\n\n\nconst useForm = cartType => {\n  const history = useHistory();\n  const cartDataItems = useSelector(store => store.cartDataReducer);\n  const buyItem = useSelector(store => store.buyCreditReducer);\n  const IMP = window.IMP;\n  IMP.init(\"imp45750210\");\n\n  if (cartType === 1) {\n    var _cartDataItems$4, _cartDataItems$5, _cartDataItems$6, _cartDataItems$6$, _cartDataItems$7, _cartDataItems$7$;\n\n    const totalPrice = (_cartDataItems$4 = cartDataItems[0]) === null || _cartDataItems$4 === void 0 ? void 0 : _cartDataItems$4[0].reduce((acc, cur) => {\n      return acc += cur.credit_cash;\n    }, 0);\n    const totalCredit = (_cartDataItems$5 = cartDataItems[0]) === null || _cartDataItems$5 === void 0 ? void 0 : _cartDataItems$5[0].reduce((acc, cur) => {\n      return acc += cur.credit_amount;\n    }, 0);\n    const cartEmail = (_cartDataItems$6 = cartDataItems[0]) === null || _cartDataItems$6 === void 0 ? void 0 : (_cartDataItems$6$ = _cartDataItems$6[0]) === null || _cartDataItems$6$ === void 0 ? void 0 : _cartDataItems$6$.map(list => list.credit_user);\n    const cartId = (_cartDataItems$7 = cartDataItems[0]) === null || _cartDataItems$7 === void 0 ? void 0 : (_cartDataItems$7$ = _cartDataItems$7[0]) === null || _cartDataItems$7$ === void 0 ? void 0 : _cartDataItems$7$.map(list => list.cart_id);\n    const convertCartId = String(cartId);\n    const convertCartEmail = String(cartEmail[0]);\n    IMP.request_pay({\n      pg: \"kcp\",\n      pay_method: \"card\",\n      merchant_uid: convertCartId,\n      name: `${totalCredit} 포인트`,\n      amount: totalPrice,\n      buyer_email: convertCartEmail\n    }, function (rsp) {\n      if (rsp.success) {\n        let msg = \"결제가 완료되었습니다.\";\n        msg && history.push(\"/ThankYou\");\n        deleteMultiCredit(cartDataItems);\n        postCartCredits(cartDataItems);\n      } else {\n        msg = \"결제에 실패하였습니다.\";\n        msg += \"에러내용 : \" + rsp.error_msg;\n      }\n\n      alert(msg);\n    });\n  }\n\n  if (cartType === 2) {\n    var _buyItem$4, _buyItem$5, _buyItem$6, _buyItem$7;\n\n    const totalPrice = (_buyItem$4 = buyItem[0]) === null || _buyItem$4 === void 0 ? void 0 : _buyItem$4[0][\"credit_cash\"];\n    const totalCredit = (_buyItem$5 = buyItem[0]) === null || _buyItem$5 === void 0 ? void 0 : _buyItem$5[0][\"credit_amount\"];\n    const cartEmail = (_buyItem$6 = buyItem[0]) === null || _buyItem$6 === void 0 ? void 0 : _buyItem$6[0][\"email\"];\n    const cartId = (_buyItem$7 = buyItem[0]) === null || _buyItem$7 === void 0 ? void 0 : _buyItem$7[0][\"cart_id\"];\n    const convertCartId = String(cartId);\n    const convertCartEmail = String(cartEmail);\n    IMP.request_pay({\n      pg: \"kcp\",\n      pay_method: \"card\",\n      merchant_uid: convertCartId,\n      name: `${totalCredit} 포인트`,\n      amount: totalPrice,\n      buyer_email: convertCartEmail\n    }, function (rsp) {\n      if (rsp.success) {\n        var msg = \"결제가 완료되었습니다.\";\n        msg && history.push(\"/ThankYou\");\n        postDirectBuyCredits(buyItem);\n      } else {\n        var msg = \"결제에 실패하였습니다.\";\n        msg += \"에러내용 : \" + rsp.error_msg;\n      }\n\n      alert(msg);\n    });\n  }\n};\n\nexport default useForm;","map":{"version":3,"sources":["/Users/merchsquare/Desktop/Kyle/sellist-partners/src/Pages/CheckOut/useForm.js"],"names":["axios","useHistory","qs","useSelector","headers","buyCredit","deleteMultiCart","EMAIL","localStorage","getItem","postCartCredits","cartDataItems","getCash","map","list","credit_cash","getCredit","credit_amount","data","stringify","email","price","credit","post","deleteMultiCredit","userCartId","cart_id","convertUserId","String","deleteData","cart_ids","delete","params","postDirectBuyCredits","buyItem","cartId","from_cart","useForm","cartType","history","store","cartDataReducer","buyCreditReducer","IMP","window","init","totalPrice","reduce","acc","cur","totalCredit","cartEmail","credit_user","convertCartId","convertCartEmail","request_pay","pg","pay_method","merchant_uid","name","amount","buyer_email","rsp","success","msg","push","error_msg","alert"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport qs from \"qs\";\nimport { useSelector } from \"react-redux\";\nimport { headers, buyCredit, deleteMultiCart } from \"../../Config/urls\";\n\nconst EMAIL = localStorage.getItem(\"email\");\n\n// CartType: 1, 정상적으로 구매가 진행되면 포인트 차감 진행\nconst postCartCredits = async cartDataItems => {\n  const getCash = cartDataItems[0]?.[0]?.map(list => list.credit_cash);\n  const getCredit = cartDataItems[0]?.[0]?.map(list => list.credit_amount);\n  const data = qs.stringify({\n    email: EMAIL,\n    price: getCash,\n    credit: getCredit\n  });\n  await axios.post(buyCredit, data, {\n    headers\n  });\n};\n\n// 정상적으로 구매가 진행되면 장바구니에 담긴 Item 삭제\nconst deleteMultiCredit = async cartDataItems => {\n  const userCartId = cartDataItems[0]?.[0]?.map(list => list.cart_id);\n  const convertUserId = String(userCartId);\n  const deleteData = { email: EMAIL, cart_ids: convertUserId };\n  await axios.delete(deleteMultiCart, {\n    headers,\n    params: deleteData\n  });\n};\n\n// CartType:2, 정상적으로 구매가 진행되면 포인트 차감 진행\nconst postDirectBuyCredits = async buyItem => {\n  const getCash = buyItem[0]?.[0][\"credit_cash\"];\n  const getCredit = buyItem[0]?.[0][\"credit_amount\"];\n  const cartId = buyItem[0]?.[0][\"cart_id\"];\n  const data = qs.stringify({\n    email: EMAIL,\n    price: getCash,\n    credit: getCredit,\n    from_cart: 1,\n    cart_id: cartId\n  });\n  await axios.post(buyCredit, data, {\n    headers\n  });\n};\n\n/* 전달 받은 cartType 숫자에 따라 결재 process가 구분된다.\n1: 장바구니에 담긴 상품을 구매할 경우 -> 개별 item의 합계를 구하고 결재를 진행한다.\n2: 바로 구매하기 버튼으로 상품을 구매할 경우 -> 최근에 담긴 store item을 확인하여 낱개 item의 결재를 진행한다.\n*/\nconst useForm = cartType => {\n  const history = useHistory();\n  const cartDataItems = useSelector(store => store.cartDataReducer);\n  const buyItem = useSelector(store => store.buyCreditReducer);\n  const IMP = window.IMP;\n  IMP.init(\"imp45750210\");\n\n  if (cartType === 1) {\n    const totalPrice = cartDataItems[0]?.[0].reduce((acc, cur) => {\n      return (acc += cur.credit_cash);\n    }, 0);\n    const totalCredit = cartDataItems[0]?.[0].reduce((acc, cur) => {\n      return (acc += cur.credit_amount);\n    }, 0);\n    const cartEmail = cartDataItems[0]?.[0]?.map(list => list.credit_user);\n    const cartId = cartDataItems[0]?.[0]?.map(list => list.cart_id);\n    const convertCartId = String(cartId);\n    const convertCartEmail = String(cartEmail[0]);\n    IMP.request_pay(\n      {\n        pg: \"kcp\",\n        pay_method: \"card\",\n        merchant_uid: convertCartId,\n        name: `${totalCredit} 포인트`,\n        amount: totalPrice,\n        buyer_email: convertCartEmail\n      },\n      function (rsp) {\n        if (rsp.success) {\n          let msg = \"결제가 완료되었습니다.\";\n          msg && history.push(\"/ThankYou\");\n          deleteMultiCredit(cartDataItems);\n          postCartCredits(cartDataItems);\n        } else {\n          msg = \"결제에 실패하였습니다.\";\n          msg += \"에러내용 : \" + rsp.error_msg;\n        }\n        alert(msg);\n      }\n    );\n  }\n  if (cartType === 2) {\n    const totalPrice = buyItem[0]?.[0][\"credit_cash\"];\n    const totalCredit = buyItem[0]?.[0][\"credit_amount\"];\n    const cartEmail = buyItem[0]?.[0][\"email\"];\n    const cartId = buyItem[0]?.[0][\"cart_id\"];\n    const convertCartId = String(cartId);\n    const convertCartEmail = String(cartEmail);\n    IMP.request_pay(\n      {\n        pg: \"kcp\",\n        pay_method: \"card\",\n        merchant_uid: convertCartId,\n        name: `${totalCredit} 포인트`,\n        amount: totalPrice,\n        buyer_email: convertCartEmail\n      },\n      function (rsp) {\n        if (rsp.success) {\n          var msg = \"결제가 완료되었습니다.\";\n          msg && history.push(\"/ThankYou\");\n          postDirectBuyCredits(buyItem);\n        } else {\n          var msg = \"결제에 실패하였습니다.\";\n          msg += \"에러내용 : \" + rsp.error_msg;\n        }\n        alert(msg);\n      }\n    );\n  }\n};\nexport default useForm;\n"]},"metadata":{},"sourceType":"module"}